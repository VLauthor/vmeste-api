import {
  Answers,
  monthItem,
  paramsStepMinute,
  Questions,
  Quiz,
  stepCancel,
  stepHourParams,
} from 'src/objects/interfaces';
import { InlineKeyboard } from 'grammy';
import { create } from 'node:domain';
import { title } from 'node:process';

export class InlineKeyboards {
  constructor() {}
  register(code: string) {
    const data = [
      { text: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', data: `accept_register-${code}` },
      { text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', data: `disable_register-${code}` },
    ];
    return new InlineKeyboard()
      .text(data[0].text, data[0].data)
      .row()
      .text(data[1].text, data[1].data);
  }
  login(code: string) {
    const data = [
      { text: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', data: `accept_login-${code}` },
      { text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', data: `disable_login-${code}` },
    ];
    return new InlineKeyboard()
      .text(data[0].text, data[0].data)
      .row()
      .text(data[1].text, data[1].data);
  }
  reminders() {
    return new InlineKeyboard()
      .text('–°–æ–∑–¥–∞—Ç—å', 'create_reminders')
      .row()
      .text('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –í—Å–µ', 'open_all_reminders')
      .row()
      .text('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ', 'open_past_reminders')
      .row()
      .text('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ', 'open_future_reminders')
      .row()
      .text('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ', 'open_last_reminders');
  }
  stepButton(step: number, callback?: string) {
    if (!callback) callback = 'remindersThisStep';
    return { text: `${step}/3`, callback_data: callback };
  }
  cancelButton(tag: string) {
    return { text: `–û—Ç–º–µ–Ω–∞`, callback_data: `${tag}-cancel` };
  }
  margeStepCancel(params: stepCancel) {
    const step = this.stepButton(params.step);
    if (!params.boolCancel) return new InlineKeyboard().row(step);
    const cancel = this.cancelButton(params.tag);
    return new InlineKeyboard().row(step).row(cancel);
  }
  keyboardHour(tag: string, thisHour: number, format: 'AM' | 'PM') {
    console.log(thisHour, thisHour < 24);
    return new InlineKeyboard()
      .text(thisHour < 24 ? '–ü–µ–π—Ç–∏ –∫ –º–∏–Ω—É—Ç–∞–º' : '', `${tag}-kh-next-minute`)
      .row()
      .text('11', `${tag}-kh=11`)
      .text('12', `${tag}-kh=12`)
      .text('01', `${tag}-kh=${checkThisValue(1, thisHour)}`)
      .text('02', `${tag}-kh=${checkThisValue(2, thisHour)}`)
      .row()

      .text('10', `${tag}-kh=${checkThisValue(10, thisHour)}`)

      .text(`AM${format == 'AM' ? ' üìå' : ''}`, `${tag}-kh=AM`)
      .text('03', `${tag}-kh=${checkThisValue(3, thisHour)}`)
      .row()

      .text('09', `${tag}-kh=${checkThisValue(9, thisHour)}`)
      .text(`PM${format == 'PM' ? ' üìå' : ''}`, `${tag}-kh=PM`)
      .text('04', `${tag}-kh=${checkThisValue(4, thisHour)}`)
      .row()

      .text('08', `${tag}-kh=${checkThisValue(8, thisHour)}`)
      .text('07', `${tag}-kh=${checkThisValue(7, thisHour)}`)
      .text('06', `${tag}-kh=${checkThisValue(6, thisHour)}`)
      .text('05', `${tag}-kh=${checkThisValue(5, thisHour)}`);
  }
  margeStepHour(params: stepHourParams) {
    const step = this.stepButton(params.step);
    const keyboardHour = this.keyboardHour(
      params.tag,
      params.thisHour,
      params.format,
    );
    const cancel = this.cancelButton(params.tag);
    return keyboardHour.row(step).row(cancel);
  }
  keyboardDate(
    tag: string,
    thisDay: number,
    thisMonth: monthItem,
    thisYear: number,
  ) {
    return new InlineKeyboard()
      .text(thisDay != 0 ? '–î–∞–ª–µ–µ' : '', `${tag}-kd-next-hour`)
      .row()
      .text('<-', `${tag}-bMonth`)
      .text(`${thisMonth.rus}`, `${tag}-inf-month${thisMonth.eng}`)
      .text('->', `${tag}-nMonth`)
      .row()
      .text('1', `${tag}-kd=${checkThisValue(1, thisDay)}`)
      .text('2', `${tag}-kd=${checkThisValue(2, thisDay)}`)
      .text('3', `${tag}-kd=${checkThisValue(3, thisDay)}`)
      .text('4', `${tag}-kd=${checkThisValue(4, thisDay)}`)
      .text('5', `${tag}-kd=${checkThisValue(5, thisDay)}`)
      .text('6', `${tag}-kd=${checkThisValue(6, thisDay)}`)
      .text('7', `${tag}-kd=${checkThisValue(7, thisDay)}`)
      .row()
      .text('8', `${tag}-kd=${checkThisValue(8, thisDay)}`)
      .text('9', `${tag}-kd=${checkThisValue(9, thisDay)}`)
      .text('10', `${tag}-kd=${checkThisValue(10, thisDay)}`)
      .text('11', `${tag}-kd=${checkThisValue(11, thisDay)}`)
      .text('12', `${tag}-kd=${checkThisValue(12, thisDay)}`)
      .text('13', `${tag}-kd=${checkThisValue(13, thisDay)}`)
      .text('14', `${tag}-kd=${checkThisValue(14, thisDay)}`)
      .row()
      .text('15', `${tag}-kd=${checkThisValue(15, thisDay)}`)
      .text('16', `${tag}-kd=${checkThisValue(16, thisDay)}`)
      .text('17', `${tag}-kd=${checkThisValue(17, thisDay)}`)
      .text('18', `${tag}-kd=${checkThisValue(18, thisDay)}`)
      .text('19', `${tag}-kd=${checkThisValue(19, thisDay)}`)
      .text('20', `${tag}-kd=${checkThisValue(20, thisDay)}`)
      .text('21', `${tag}-kd=${checkThisValue(21, thisDay)}`)
      .row()
      .text('22', `${tag}-kd=${checkThisValue(22, thisDay)}`)
      .text('23', `${tag}-kd=${checkThisValue(23, thisDay)}`)
      .text('24', `${tag}-kd=${checkThisValue(24, thisDay)}`)
      .text('25', `${tag}-kd=${checkThisValue(25, thisDay)}`)
      .text('26', `${tag}-kd=${checkThisValue(26, thisDay)}`)
      .text('27', `${tag}-kd=${checkThisValue(27, thisDay)}`)
      .text('28', `${tag}-kd=${checkThisValue(28, thisDay)}`)
      .row()
      .text('29', `${tag}-kd=${checkDay(29, thisMonth.countDay, thisDay)}`)
      .text('30', `${tag}-kd=${checkDay(30, thisMonth.countDay, thisDay)}`)
      .text('31', `${tag}-kd=${checkDay(31, thisMonth.countDay, thisDay)}`)
      .row()
      .text('<-', `${tag}-bYear`)
      .text(`${thisYear}`, `${tag}-inf-year${thisYear}`)
      .text('->', `${tag}-nYear`);
  }
  mergeStepKeyboard(
    tag: string,
    step: number,
    thisDay: number,
    thisMonth: monthItem,
    thisYear: number,
    callback?: string,
  ) {
    const reminders = this.stepButton(step);
    const keyboard = this.keyboardDate(tag, thisDay, thisMonth, thisYear);
    const cancel = this.cancelButton(tag);
    return keyboard.row(reminders).row(cancel);
  }
  keyboardMinutes(tag: string, thisMinute: number) {
    return new InlineKeyboard()
      .text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', `${tag}-kmp-save`)
      .row()
      .text('+1', `${tag}-kmp=1`)
      .text('+5', `${tag}-kmp=5`)
      .text('+10', `${tag}-kmp=10`)
      .text('+15', `${tag}-kmp=15`)
      .row()
      .text(`${thisMinute}`, 'plug')
      .row()
      .text('-1', `${tag}-kmm=1`)
      .text('-5', `${tag}-kmm=5`)
      .text('-10', `${tag}-kmm=10`)
      .text('-15', `${tag}-kmm=15`);
  }
  margeStepMinute(params: paramsStepMinute) {
    const cancelButton = this.cancelButton(params.tag);
    const stepButton = this.stepButton(params.step);
    const keyboardMinutes = this.keyboardMinutes(params.tag, params.thisMinute);
    return keyboardMinutes.row(stepButton).row(cancelButton);
  }
  saveButton(tag: string) {
    return { text: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data: `${tag}-save` };
  }
  saveKeyboard(tag: string) {
    const cancel = this.cancelButton(tag);
    const save = this.saveButton(tag);
    return new InlineKeyboard().row(save).row(cancel);
  }
  closeButton(tag: string) {
    return { text: '–ó–∞–∫—Ä—ã—Ç—å', callback_data: `${tag}-close` };
  }
  keyboardClose(tag: string) {
    return new InlineKeyboard().row(this.closeButton(tag));
  }
  keyboardDeleteClose(tag: string, id: number) {
    return new InlineKeyboard()
      .text('–£–¥–∞–ª–∏—Ç—å', `${tag}-delete=${id}`)
      .row(this.closeButton(tag));
  }
  boxSlider(
    tag: string,
    id: number,
    settings: { view: boolean; delete: boolean },
  ) {
    return new InlineKeyboard()
      .text(settings.view == true ? '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å' : '', `${tag}-view=${id}`)
      .row()
      .text('<-', `${tag}-slider-back`)
      .text('->', `${tag}-slider-next`)
      .row()
      .text(settings.delete ? '–£–¥–∞–ª–∏—Ç—å' : '', `${tag}-delete=${id}`)
      .row(this.closeButton(tag));
  }
  boxSliderQuiz(tag: string, id: number) {
    return new InlineKeyboard()
      .text('–ü—Ä–æ–π—Ç–∏', `${tag}-view=${id}`)
      .row()
      .text('<-', `${tag}-slider-back`)
      .text('->', `${tag}-slider-next`)
      .row(this.closeButton(tag));
  }
  buttonRegister() {
    return new InlineKeyboard().text('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', 'startRegistration');
  }
  keyboardQuiz() {
    return new InlineKeyboard()
      .text('–°–æ–∑–¥–∞—Ç—å –∫–≤–∏–∑', 'createQuiz')
      .row()
      .text('–í—Å–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã', 'view-all-quiz')
      .row(this.closeButton('default'));
  }
  createQuiz(data: Quiz) {
    const { title, description, mode, key } = data;
    return new InlineKeyboard()
      .text(title ? '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ' : '–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', 'add_name_quiz')
      .row()
      .text(
        description ? '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ' : '–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ',
        'add_description_quiz',
      )
      .row()
      .text(
        mode == 'private' ? '–¢–∏–ø –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã üîí' : '–¢–∏–ø –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: üîì',
        'edit_mode_quiz',
      )
      .row()
      .text(mode == 'private' ? '–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á' : '', 'add_key_quiz')
      .row()
      .text(
        title && description && (mode == 'public' || (mode == 'private' && key))
          ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'
          : '',
        'save-data-quiz',
      )
      .row(this.closeButton('default'));
  }
  keyboardAddQuestion(data: Questions[]) {
    const keyboard = new InlineKeyboard();
    if (data.length > 0) {
      keyboard.text('–°–æ–∑–¥–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–∏–Ω—É', 'finally-create-quiz').row();
    }
    if (data)
      for (let i = 0; i < data.length; i++) {
        keyboard.text(`${i + 1}) ${data[i].title}`, `edit-question=${i}`).row();
      }
    keyboard
      .text('–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å', 'add_questions')
      .row(this.closeButton('default'));
    return keyboard;
  }
  keyboardCreateQuestion(data: Answers[], title: string) {
    const keyboard = new InlineKeyboard();
    keyboard
      .text(title && data.length > 1 ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å' : '', 'save-question')
      .row();
    keyboard
      .text(
        title ? '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞' : '–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞',
        'add_text_question',
      )
      .row();
    for (let i = 0; i < data.length; i++) {
      keyboard.text(
        `${i + 1}) ${data[i].correct ? ' ‚úÖ' : '‚ùå'}`,
        `edit-answer=${i}`,
      );
      if ((i + 1) % 2 === 0) keyboard.row();
    }
    keyboard
      .row()
      .text(title ? '–î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞' : '', 'add_answer')
      .row()
      .text('–£–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞', `delete-question`)
      .row(this.closeButton('default'));
    return keyboard;
  }
  keyboardCreateAnswer(data: Answers) {
    const keyboard = new InlineKeyboard();
    keyboard
      .text(data.title ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '', 'save-answer')
      .row()
      .text('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞', 'add_text_answer')
      .row()
      .text(data.correct === true ? '‚úÖ' : '‚ùå', 'edit_correct_answer')
      .row()
      .text('–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å', `delete-answer`)
      .row(this.closeButton('default'));
    return keyboard;
  }
}

function checkDay(item, maxDay, thisDay) {
  if (maxDay >= item) {
    if (item == thisDay) {
      return true;
    } else return item;
  } else return false;
}

function checkThisValue(item: number, thisValue: number) {
  if (item == thisValue) {
    return true;
  } else return item;
}
